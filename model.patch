diff --git a/frontend/app/index.tsx b/frontend/app/index.tsx
index 60b6cda..fda10e5 100644
--- a/frontend/app/index.tsx
+++ b/frontend/app/index.tsx
@@ -1,30 +1,347 @@
-import { Text, View, StyleSheet, Image } from "react-native";
+import React, { useEffect, useState } from 'react';
+import {
+  View,
+  Text,
+  StyleSheet,
+  ScrollView,
+  TouchableOpacity,
+  SafeAreaView,
+  RefreshControl,
+} from 'react-native';
+import { Ionicons } from '@expo/vector-icons';
+import { useAuth } from '../contexts/AuthContext';
+import { Colors } from '../constants/Colors';
+import { Loop } from '../types';
+import Constants from 'expo-constants';
+import { router } from 'expo-router';
 
-const EXPO_PUBLIC_BACKEND_URL = process.env.EXPO_PUBLIC_BACKEND_URL;
+const API_BASE_URL = Constants.expoConfig?.extra?.EXPO_PUBLIC_BACKEND_URL || '';
 
-export default function Index() {
-  console.log(EXPO_PUBLIC_BACKEND_URL, "EXPO_PUBLIC_BACKEND_URL");
+const Dashboard: React.FC = () => {
+  const { user, token, logout } = useAuth();
+  const [loops, setLoops] = useState<Loop[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [refreshing, setRefreshing] = useState(false);
+
+  const fetchLoops = async () => {
+    try {
+      const response = await fetch(`${API_BASE_URL}/api/loops`, {
+        headers: {
+          'Authorization': `Bearer ${token}`,
+          'Content-Type': 'application/json',
+        },
+      });
+
+      if (response.ok) {
+        const data = await response.json();
+        setLoops(data);
+      }
+    } catch (error) {
+      console.log('Error fetching loops:', error);
+    } finally {
+      setLoading(false);
+      setRefreshing(false);
+    }
+  };
+
+  useEffect(() => {
+    fetchLoops();
+  }, []);
+
+  const onRefresh = () => {
+    setRefreshing(true);
+    fetchLoops();
+  };
+
+  const renderLoopCard = (loop: Loop) => {
+    const progressWidth = `${loop.progress || 0}%`;
+    
+    return (
+      <TouchableOpacity
+        key={loop.id}
+        style={[styles.loopCard, { borderLeftColor: loop.color }]}
+        onPress={() => router.push(`/loop/${loop.id}`)}
+      >
+        <View style={styles.loopHeader}>
+          <View style={styles.loopInfo}>
+            <Text style={styles.loopName}>{loop.name}</Text>
+            {loop.description && (
+              <Text style={styles.loopDescription}>{loop.description}</Text>
+            )}
+          </View>
+          <View style={styles.loopStats}>
+            <Text style={styles.loopProgress}>{loop.progress || 0}%</Text>
+            <Text style={styles.loopTaskCount}>
+              {loop.completed_tasks || 0}/{loop.total_tasks || 0}
+            </Text>
+          </View>
+        </View>
+        
+        <View style={styles.progressContainer}>
+          <View style={styles.progressBackground}>
+            <View 
+              style={[styles.progressFill, { width: progressWidth, backgroundColor: loop.color }]} 
+            />
+          </View>
+          <View style={styles.resetInfo}>
+            <Ionicons 
+              name={loop.reset_rule === 'manual' ? 'hand-left' : loop.reset_rule === 'daily' ? 'calendar' : 'calendar-outline'} 
+              size={12} 
+              color={Colors.light.textSecondary} 
+            />
+            <Text style={styles.resetText}>{loop.reset_rule}</Text>
+          </View>
+        </View>
+      </TouchableOpacity>
+    );
+  };
+
+  if (loading) {
+    return (
+      <SafeAreaView style={styles.container}>
+        <View style={styles.loadingContainer}>
+          <Text style={styles.loadingText}>Loading your loops...</Text>
+        </View>
+      </SafeAreaView>
+    );
+  }
 
   return (
-    <View style={styles.container}>
-      <Image
-        source={require("../assets/images/app-image.png")}
-        style={styles.image}
-      />
-    </View>
+    <SafeAreaView style={styles.container}>
+      <View style={styles.header}>
+        <View style={styles.headerLeft}>
+          <View style={styles.logoContainer}>
+            <Ionicons name="sync" size={24} color={Colors.light.primary} />
+          </View>
+          <View>
+            <Text style={styles.welcomeText}>Welcome back</Text>
+            <Text style={styles.userName}>{user?.name}</Text>
+          </View>
+        </View>
+        <TouchableOpacity onPress={logout} style={styles.logoutButton}>
+          <Ionicons name="log-out-outline" size={24} color={Colors.light.textSecondary} />
+        </TouchableOpacity>
+      </View>
+
+      <ScrollView 
+        style={styles.content}
+        refreshControl={
+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
+        }
+      >
+        <View style={styles.sectionHeader}>
+          <Text style={styles.sectionTitle}>My Loops</Text>
+          <TouchableOpacity 
+            style={styles.createButton}
+            onPress={() => router.push('/create-loop')}
+          >
+            <Ionicons name="add" size={20} color={Colors.light.background} />
+            <Text style={styles.createButtonText}>New Loop</Text>
+          </TouchableOpacity>
+        </View>
+
+        {loops.length === 0 ? (
+          <View style={styles.emptyState}>
+            <Ionicons name="sync" size={48} color={Colors.light.textSecondary} />
+            <Text style={styles.emptyTitle}>No loops yet</Text>
+            <Text style={styles.emptyDescription}>
+              Create your first loop to start organizing your routines and recurring tasks.
+            </Text>
+            <TouchableOpacity 
+              style={styles.emptyCreateButton}
+              onPress={() => router.push('/create-loop')}
+            >
+              <Text style={styles.emptyCreateButtonText}>Create Your First Loop</Text>
+            </TouchableOpacity>
+          </View>
+        ) : (
+          <View style={styles.loopsContainer}>
+            {loops.map(renderLoopCard)}
+          </View>
+        )}
+      </ScrollView>
+    </SafeAreaView>
   );
-}
+};
 
 const styles = StyleSheet.create({
   container: {
     flex: 1,
-    backgroundColor: "#0c0c0c",
-    alignItems: "center",
-    justifyContent: "center",
+    backgroundColor: Colors.light.background,
+  },
+  loadingContainer: {
+    flex: 1,
+    justifyContent: 'center',
+    alignItems: 'center',
+  },
+  loadingText: {
+    fontSize: 16,
+    color: Colors.light.textSecondary,
+  },
+  header: {
+    flexDirection: 'row',
+    justifyContent: 'space-between',
+    alignItems: 'center',
+    paddingHorizontal: 24,
+    paddingVertical: 16,
+    backgroundColor: Colors.light.background,
+  },
+  headerLeft: {
+    flexDirection: 'row',
+    alignItems: 'center',
+  },
+  logoContainer: {
+    width: 40,
+    height: 40,
+    borderRadius: 20,
+    backgroundColor: Colors.light.backgroundSecondary,
+    justifyContent: 'center',
+    alignItems: 'center',
+    marginRight: 12,
+  },
+  welcomeText: {
+    fontSize: 14,
+    color: Colors.light.textSecondary,
+  },
+  userName: {
+    fontSize: 18,
+    fontWeight: '600',
+    color: Colors.light.text,
+  },
+  logoutButton: {
+    padding: 8,
+  },
+  content: {
+    flex: 1,
+    paddingHorizontal: 24,
+  },
+  sectionHeader: {
+    flexDirection: 'row',
+    justifyContent: 'space-between',
+    alignItems: 'center',
+    marginBottom: 16,
+  },
+  sectionTitle: {
+    fontSize: 24,
+    fontWeight: 'bold',
+    color: Colors.light.text,
+  },
+  createButton: {
+    flexDirection: 'row',
+    alignItems: 'center',
+    backgroundColor: Colors.light.primary,
+    paddingHorizontal: 16,
+    paddingVertical: 8,
+    borderRadius: 20,
   },
-  image: {
-    width: "100%",
-    height: "100%",
-    resizeMode: "contain",
+  createButtonText: {
+    fontSize: 14,
+    fontWeight: '600',
+    color: Colors.light.background,
+    marginLeft: 4,
+  },
+  emptyState: {
+    alignItems: 'center',
+    paddingVertical: 60,
+  },
+  emptyTitle: {
+    fontSize: 20,
+    fontWeight: '600',
+    color: Colors.light.text,
+    marginTop: 16,
+    marginBottom: 8,
+  },
+  emptyDescription: {
+    fontSize: 16,
+    color: Colors.light.textSecondary,
+    textAlign: 'center',
+    marginBottom: 24,
+    lineHeight: 24,
+  },
+  emptyCreateButton: {
+    backgroundColor: Colors.light.secondary,
+    paddingHorizontal: 24,
+    paddingVertical: 12,
+    borderRadius: 24,
+  },
+  emptyCreateButtonText: {
+    fontSize: 16,
+    fontWeight: '600',
+    color: Colors.light.background,
+  },
+  loopsContainer: {
+    paddingBottom: 24,
+  },
+  loopCard: {
+    backgroundColor: Colors.light.surface,
+    borderRadius: 16,
+    padding: 16,
+    marginBottom: 16,
+    borderLeftWidth: 4,
+    shadowColor: '#000',
+    shadowOffset: { width: 0, height: 2 },
+    shadowOpacity: 0.1,
+    shadowRadius: 4,
+    elevation: 3,
+  },
+  loopHeader: {
+    flexDirection: 'row',
+    justifyContent: 'space-between',
+    alignItems: 'flex-start',
+    marginBottom: 12,
+  },
+  loopInfo: {
+    flex: 1,
+    marginRight: 16,
+  },
+  loopName: {
+    fontSize: 18,
+    fontWeight: '600',
+    color: Colors.light.text,
+    marginBottom: 4,
+  },
+  loopDescription: {
+    fontSize: 14,
+    color: Colors.light.textSecondary,
+    lineHeight: 20,
+  },
+  loopStats: {
+    alignItems: 'flex-end',
+  },
+  loopProgress: {
+    fontSize: 20,
+    fontWeight: 'bold',
+    color: Colors.light.text,
+  },
+  loopTaskCount: {
+    fontSize: 12,
+    color: Colors.light.textSecondary,
+    marginTop: 2,
+  },
+  progressContainer: {
+    marginTop: 8,
+  },
+  progressBackground: {
+    height: 6,
+    backgroundColor: Colors.light.backgroundSecondary,
+    borderRadius: 3,
+    overflow: 'hidden',
+  },
+  progressFill: {
+    height: '100%',
+    borderRadius: 3,
+  },
+  resetInfo: {
+    flexDirection: 'row',
+    alignItems: 'center',
+    marginTop: 8,
+  },
+  resetText: {
+    fontSize: 12,
+    color: Colors.light.textSecondary,
+    marginLeft: 4,
+    textTransform: 'capitalize',
   },
 });
+
+export default Dashboard;
